// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STOApi.Models;

namespace STOApi.Migrations
{
    [DbContext(typeof(STOContext))]
    [Migration("20190429201855_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("STOApi.Entities.EventFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("EventFormat");
                });

            modelBuilder.Entity("STOApi.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FirstParticipantId");

                    b.Property<int?>("ScheduleId");

                    b.Property<int?>("SecondParticipantId");

                    b.Property<int?>("WinnerId");

                    b.HasKey("Id");

                    b.HasIndex("FirstParticipantId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SecondParticipantId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("STOApi.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BreakTime");

                    b.Property<int>("GameTime");

                    b.Property<int>("TournamentId");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId")
                        .IsUnique();

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("STOApi.Entities.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("STOApi.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventFormatId");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int>("SportId");

                    b.HasKey("Id");

                    b.HasIndex("EventFormatId");

                    b.HasIndex("SportId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("STOApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<byte[]>("Image");

                    b.Property<string>("ParticipantRepresentatives");

                    b.Property<string>("Password");

                    b.Property<string>("RepresentativeParticipants");

                    b.Property<string>("Role");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("STOApi.Entities.UserTournament", b =>
                {
                    b.Property<int>("TournamentId");

                    b.Property<int>("UserId");

                    b.Property<bool>("Joined");

                    b.HasKey("TournamentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTournament");
                });

            modelBuilder.Entity("STOApi.Entities.Game", b =>
                {
                    b.HasOne("STOApi.Entities.User", "FirstParticipant")
                        .WithMany()
                        .HasForeignKey("FirstParticipantId");

                    b.HasOne("STOApi.Entities.Schedule")
                        .WithMany("Games")
                        .HasForeignKey("ScheduleId");

                    b.HasOne("STOApi.Entities.User", "SecondParticipant")
                        .WithMany()
                        .HasForeignKey("SecondParticipantId");

                    b.HasOne("STOApi.Entities.User", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");

                    b.OwnsOne("STOApi.Entities.Score", "Score", b1 =>
                        {
                            b1.Property<int>("GameId");

                            b1.Property<int>("FirstParticipantScore");

                            b1.Property<int>("SecondParticipantScore");

                            b1.HasKey("GameId");

                            b1.ToTable("Games");

                            b1.HasOne("STOApi.Entities.Game")
                                .WithOne("Score")
                                .HasForeignKey("STOApi.Entities.Score", "GameId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("STOApi.Entities.DateRange", "GameSchedule", b1 =>
                        {
                            b1.Property<int>("GameId");

                            b1.Property<DateTime>("End");

                            b1.Property<DateTime>("Start");

                            b1.HasKey("GameId");

                            b1.ToTable("Games");

                            b1.HasOne("STOApi.Entities.Game")
                                .WithOne("GameSchedule")
                                .HasForeignKey("STOApi.Entities.DateRange", "GameId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("STOApi.Entities.Schedule", b =>
                {
                    b.HasOne("STOApi.Entities.Tournament", "Tournament")
                        .WithOne("Schedule")
                        .HasForeignKey("STOApi.Entities.Schedule", "TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("STOApi.Entities.DateRange", "TournamentSchedule", b1 =>
                        {
                            b1.Property<int>("ScheduleId");

                            b1.Property<DateTime>("End");

                            b1.Property<DateTime>("Start");

                            b1.HasKey("ScheduleId");

                            b1.ToTable("Schedules");

                            b1.HasOne("STOApi.Entities.Schedule")
                                .WithOne("TournamentSchedule")
                                .HasForeignKey("STOApi.Entities.DateRange", "ScheduleId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("STOApi.Entities.Tournament", b =>
                {
                    b.HasOne("STOApi.Entities.EventFormat", "EventFormat")
                        .WithMany("Tournaments")
                        .HasForeignKey("EventFormatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("STOApi.Entities.Sport", "Sport")
                        .WithMany("Tournaments")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("STOApi.Entities.UserTournament", b =>
                {
                    b.HasOne("STOApi.Entities.Tournament", "Tournament")
                        .WithMany("UserTournaments")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("STOApi.Entities.User", "User")
                        .WithMany("UserTournaments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
